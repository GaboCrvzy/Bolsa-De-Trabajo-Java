package proyectopoo;

import java.util.*;
import java.text.Normalizer;

public class GestionPuesto {
    private HashMap<String, Puesto> puestos; // idPuesto -> Puesto

    public GestionPuesto() {
        this.puestos = new HashMap<>();
    }

    public boolean agregarPuesto(Puesto p)
    {
        if (p == null) {
            System.out.println("No se puede agregar puesto (nulo).");
            return false;
        }
        String id = p.getIdPuesto();
        if (id == null) 
        {
            System.out.println("No se puede agregar puesto: id puesto nulo.");
            return false;
        }
        
        if (!id.matches("\\d+"))
        {
            System.out.println("ID puesto invalido. Debe contener solo digitos.");
            return false;
        }
        
        // Verificar unicidad
        if (puestos.containsKey(id))
        {
            System.out.println("No se puede agregar puesto: idPuesto ya existente -> " + id);
            return false;
        }
        
        puestos.put(id, p);
        System.out.println("Puesto agregado: id = " + id + " | nombre = " + p.getNombrePuesto());
        return true;
    }

    public Puesto eliminarPuesto(String idPuesto) 
    {
        if (idPuesto == null)
        {
            System.out.println("ID PUESTO inválido (nulo).");
            return null;
        }
        if (!puestos.containsKey(idPuesto)) 
        {
            System.out.println("No se encontró puesto con id: " + idPuesto);
            return null;
        }
        Puesto eliminado = puestos.remove(idPuesto);
        System.out.println("Puesto eliminado: id = " + idPuesto);
        return eliminado;
    }

    public Puesto obtenerPuesto(String idPuesto) 
    {
        if (idPuesto == null)
        {
            System.out.println("ID PUESTO inválido (nulo).");
            return null;
        }
        Puesto p = puestos.get(idPuesto);
        if (p == null) {
            System.out.println("No existe puesto con id: " + idPuesto);
        }
        return p;
    }
    
    //VERIFICA QUE EXISTA UN PUESTO DENTRO DEL MAPA
    public boolean existePuesto(String idPuesto) {
        String id = normalizeId(idPuesto);
        if (id == null) return false;
        return puestos.containsKey(id);
    }
    
    //LISTAR PUESTOS (COPIA)
    public List<Puesto> listarPuestos() {return new ArrayList<>(puestos.values());}
    
    public List<String> listarIds() 
    {
        List<String> ids = new ArrayList<>(puestos.keySet());
        Collections.sort(ids);
        return ids;
    }
    
    //CONTADOR DE CUANTOS PUESTOS EXISTEN
    public int contarPuestos() {return puestos.size();}
    
    //AGG PERSONA A PUESTO
    public boolean agregarPostulanteAPuesto(String idPuesto, Persona candidato)
    {
        String id = normalizeId(idPuesto);
        if (id == null) {
            System.out.println("ID inválido al agregar postulante.");
            return false;
        }
        Puesto p = puestos.get(id);
        if (p == null) {
            System.out.println("No existe puesto con id: " + id);
            return false;
        }
        p.agregarPostulante(candidato);
        return true;
    }
    
    //ELIMINAR PERSONA DE UN PUESTO DE ACUERDO AL RUT
    public boolean eliminarPostulanteDePuesto(String idPuesto, String rutPostulante) 
    {
        String id = normalizeId(idPuesto);
        if (id == null) return false;
        Puesto p = puestos.get(id);
        if (p == null) return false;
        return p.eliminarPostulantePorRut(rutPostulante);
    }
    
    //AGG REQ A PUESTO
    public boolean agregarRequisitoAPuesto(String idPuesto, Competencia req) 
    {
        String id = normalizeId(idPuesto);
        if (id == null) return false;
        Puesto p = puestos.get(id);
        if (p == null) {
            System.out.println("Puesto no encontrado: " + id);
            return false;
        }
        p.agregarRequisito(req);
        return true;
    }
    
    //ACTULIZAR PUESTO
    public boolean actualizarPuesto(Puesto nuevoPuesto) 
    {
        if (nuevoPuesto == null) {
            System.out.println("No se puede actualizar puesto (nulo).");
            return false;
        }
        String id = nuevoPuesto.getIdPuesto();
        if (id == null || !id.matches("\\d+")) {
            System.out.println("ID PUESTO inválido.");
            return false;
        }
        if (!puestos.containsKey(id)) {
            System.out.println("No existe puesto con id: " + id);
            return false;
        }
        puestos.put(id, nuevoPuesto);
        System.out.println("Puesto actualizado: id = " + id + " | nombre = " + nuevoPuesto.getNombrePuesto());
        return true;
    }
    
    //SELECCIONAR POSTULANTES DE ACUERDO AL ID DEL PUESTO
    public LinkedList<Persona> seleccionarPostulantes(String idPuesto) 
    {
        String id = normalizeId(idPuesto);
        LinkedList<Persona> vacio = new LinkedList<>();
        if (id == null) return vacio;
        Puesto p = puestos.get(id);
        if (p == null) return vacio;
        return p.seleccionarPostulantes();
    }
    
    //MUESTRA TODOS LOS PUESTOS Y SU INFO
    public void imprimirResumen() 
    {
        if (puestos.isEmpty()) {
            System.out.println("No hay puestos registrados.");
            return;
        }
        System.out.println("=== Resumen de Puestos ===");
        for (Puesto p : puestos.values()) {
            p.mostrarPuesto();
            System.out.println("-------------------------");
        }
    }
    
    public String normalizeId(String id) {
        if (id == null) return null;
        String s = id.trim().replaceAll("[^0-9]", "");
        return s.isEmpty() ? null : s;
    }
}
